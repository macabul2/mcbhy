<!DOCTYPE html>
<!-- saved from url=(0094)file:///C:/Users/james/Dropbox/PhD/Programming/DataDrivenDocuments/TIMESsankey/TIMES/TIMES.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="utf-8">
<title>SANKEY_2020</title>
<style>

@import url(https://raw.githubusercontent.com/macabul2/mcbhy/master/style.css);

#chart {
  height: 500px;
}

.node rect {
  cursor: move;
  fill-opacity: .9;
  shape-rendering: crispEdges;
}

.node text {
  pointer-events: none;
  text-shadow: 1px 1px 0 #fff;
}

.link {
  fill: none;
  stroke: #000;
  stroke-opacity: .3;
}

.link:hover {
  stroke-opacity: 1;
  stroke: #000;
}

</style>
<style type="text/css"></style>
 </head>
<body>
<p id="chart"></p>
	<script src="https://raw.githubusercontent.com/macabul2/mcbhy/master/sankey/d3.js"></script>
	<script src="Snky2020_files/sankey.js"></script>
	<script>
	
	var units = "ktoe";
	
	var margin = {top: 10, right: 50, bottom: 5, left: 50},
		width = 900 - margin.left - margin.right,
		height = 500 - margin.top - margin.bottom;

	var formatNumber = d3.format(",.0f"),
		format = function(d) { return formatNumber(d) + units; },
		color = d3.scale.category10();
		
	// Set the sankey diagram properties
	var sankey = d3.sankey()
		.nodeWidth(25)
		.nodePadding(25)
		.size([width, height]);

	var path = sankey.link();
		// append the svg canvas to the page
		var svg = d3.select("#chart").append("svg")
			.attr("width", width + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom)
			.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// >>>>>>>>>LOAD DATA HERE*****************************************************************		
		// load the data files
		d3.csv("https://raw.githubusercontent.com/macabul2/mcbhy/master/Snky2020.csv", function(error, data) {
				//set up graph in same style as original example but empty
				energy = {"nodes" : [], "links" : []};
		  
						data.forEach(function (d) {
							energy.nodes.push({ "name": d.source });
							energy.nodes.push({ "name": d.target });
							energy.links.push({ "source": d.source, "target": d.target, "value": +d.value });
						});

						//thanks Mike Bostock https://groups.google.com/d/msg/d3-js/pl297cFtIQk/Eso4q_eBu1IJ
						//this handy little function returns only the distinct / unique nodes
						energy.nodes = d3.keys(d3.nest()
								 .key(function (d) { return d.name; })
								 .map(energy.nodes));

						//d3 force layout wants a numeric source and target
						//so loop through each link replacing the text with its index from node
						energy.links.forEach(function (d, i) {
							energy.links[i].source = energy.nodes.indexOf(energy.links[i].source);
							energy.links[i].target = energy.nodes.indexOf(energy.links[i].target);
						});

						//now loop through each nodes to make nodes an array of objects rather than an array of strings
						energy.nodes.forEach(function (d, i) {
							energy.nodes[i] = { "name": d };
						});
				
			sankey
				.nodes(energy.nodes)
				.links(energy.links)
				.layout(32);
			
			// add in the links
			var link = svg.append("g").selectAll(".link")
				.data(energy.links)
				.enter().append("path")
				.attr("class", "link")
				.attr("d", path)
				.style("stroke-width", function(d) { return Math.max(1, d.dy); })
				.style("stroke", function(d) { return d.color = color(d.source.name.replace(/ .*/, "")); })
				.sort(function(a, b) { return b.dy - a.dy; });
			
			// add the link titles
			link.append("title")
				.text(function(d) { return d.source.name + " → " + d.target.name + "\n" + format(d.value); });
			
			// add the nodes			
			var node = svg.append("g").selectAll(".node")
				.data(energy.nodes)
				.enter().append("g")
				.attr("class", "node")
				.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
				.call(d3.behavior.drag()
					.origin(function(d) { return d; })
					.on("dragstart", function() { this.parentNode.appendChild(this); })
					.on("drag", dragmove));
			
			// add the physical rectangles for the nodes
			node.append("rect")
				.attr("height", function(d) { return d.dy; })
				.attr("width", sankey.nodeWidth())
				.style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
				.style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
				.append("title")
				.text(function(d) { return d.name + "\n" + format(d.value); });
			
			// add the title for the nodes
			node.append("text")
				.attr("x", -6)
				.attr("y", function(d) { return d.dy / 2; })
				.attr("dy", ".35em")
				.attr("text-anchor", "end")
				.attr("transform", null)
				.text(function(d) { return d.name; })
				.filter(function(d) { return d.x < width / 2; })
				.attr("x", 6 + sankey.nodeWidth())
				.attr("text-anchor", "start");
			
			// here is a function for moving the node rectangles about the chart
			function dragmove(d) {
				d3.select(this).attr("transform","translate(" + (d.x = Math.max(0, Math.min(width - d.dx, d3.event.x))) + "," 
				+ (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
				sankey.relayout();
				link.attr("d", path);
				};
				
			});
		</script>
	
</body></html>